<body>


    <header>
        <%- include('./header') %>
    </header>





    <main>

        <div>자세 체크 중</div>
        <br>
        <button id="toggleButton" type="button" onclick="toggleFunctionality()">소리 끄기</button>
        <br>
        <br>

        <div id="webcam-container"></div>
        <div id="label-container"></div>
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
        <script
            src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>


        <script type="text/javascript">
            var flag = 0;


            // More API functions here:
            // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

            // the link to your model provided by Teachable Machine export panel
            const URL = "https://teachablemachine.withgoogle.com/models/hdpukdrm4/";

            let model, webcam, labelContainer, maxPredictions;

          

            


            // Load the image model and setup the webcam
            async function init() {
                const modelURL = URL + "model.json";
                const metadataURL = URL + "metadata.json";

                // load the model and metadata
                // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
                // or files from your local hard drive
                // Note: the pose library adds "tmImage" object to your window (window.tmImage)
                model = await tmImage.load(modelURL, metadataURL);
                maxPredictions = model.getTotalClasses();

                // Convenience function to setup a webcam
                const flip = true; // whether to flip the webcam
                webcam = new tmImage.Webcam(400, 400, flip); // width, height, flip
                await webcam.setup(); // request access to the webcam
                await webcam.play();

                window.requestAnimationFrame(loop);

                // append elements to the DOM
                document.getElementById("webcam-container").appendChild(webcam.canvas);
                labelContainer = document.getElementById("label-container");
                for (let i = 0; i < maxPredictions; i++) { // and class labels
                    labelContainer.appendChild(document.createElement("div"));
                }
            }

            async function loop() {
                webcam.update(); // update the webcam frame
                await predict();
                window.requestAnimationFrame(loop);
                if (flag == 1) {
                    audio.pause();
                    audio.currentTime = 0; //소리파일 처음부터 되게 초기화
                }

            }



            turtlecnt = 0;
            turtlecntsound = 0;
            var audio = new Audio('warning2.m4a');
            // run the webcam image through the image model
            async function predict() {
                // predict can take in an image, video or canvas html element
                const prediction = await model.predict(webcam.canvas);
                for (let i = 0; i < maxPredictions; i++) {
                    const classPrediction =
                        prediction[i].className + ": " + prediction[i].probability.toFixed(2);
                    labelContainer.childNodes[i].innerHTML = classPrediction;
                    if (prediction[i].className == "turtle" && prediction[i].probability > 0.5) {
                        turtlecnt++;
                    }
                }
                if (turtlecnt >= 120) {
                    console.log('audio start'); //F12
                    turtlecnt = 0;
                    turtlecntsound++;

                    audio.play();

                    document.getElementById("turtlecntsoundValue").textContent = "거북목 횟수: " + turtlecntsound;
                }
            }

            async function toggleFunctionality() {
                flag = 1 - flag; // Toggle flag between 0 and 1

                if (flag === 1) {
                    document.getElementById("toggleButton").textContent = "소리 켜기";
                    // Add code here for the new behavior when flag is 1
                } else {
                    document.getElementById("toggleButton").textContent = "소리 끄기";
                    // Add code here for the original behavior when flag is 0
                }
            }

           

            init();

        </script>
        <br>

        <div>
            <p id="turtlecntsoundValue"></p>
        </div>

        <br>

        <form action="/user_data/signin" method="POST">
            <!-- <button type="button" onclick="toggleFunctionality()">업무 종료하기</button> -->
            <button type="submit" class="btn btn-primary">업무 종료하기</button>
        </form>





    </main>

</body>